function {{name}} (view) {
  var r = {};

  function escapeHtml(string) {
    return ("" + string).replace(/[&<>"'\/]/g, function (s) {
      return {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': '&quot;',
        "'": '&#39;',
        "/": '&#x2F;'
      }[s];
    });
  }

  r._section = function (name, context, callback) {
    var value = context.lk(name);
    switch (typeof value) {
    case "object":
      if (Object.prototype.toString.call(value) == "[object Array]") {
        var buffer = "";
        for (var i = 0, len = value.length; i < len; ++i) {
          buffer += callback(context.p(value[i]), this);
        }
        return buffer;
      }
      return value ? callback(context.p(value), this) : "";
    case "function":
      // TODO: The text should be passed to the callback plain, not rendered.
      var sectionText = callback(context, this),
          self = this;

      var scopedRender = function (template) {
        return self.render(template, context);
      };

      return value.call(context.view, sectionText, scopedRender) || "";
    default:
      if (value) {
        return callback(context, this);
      }
    }

    return "";
  };

  r._inverted = function (name, context, callback) {
    var value = context.lk(name);

    // From the spec: inverted sections may render text once based on the
    // inverse value of the key. That is, they will be rendered if the key
    // doesn't exist, is false, or is an empty list.
    if (value == null || value === false || (isArray(value) && value.length === 0)) {
      return callback(context, this);
    }

    return "";
  };

  r._name = function (name, context, escape) {
    var value = context.lk(name);

    if (typeof value === "function") {
      value = value.call(context.view);
    }

    var string = (value == null) ? "" : String(value);

    if (escape) {
      return escapeHtml(string);
    }

    return string;
  };



  function _c(view, parent) {
    this.view = view;
    this.parent = parent;
    this.cc();
  }

  _c.prototype.cc = function () {
    this._c = {};
  };

  _c.prototype.p = function (view) {
    return new _c(view, this);
  };_c

  _c.prototype.lk = function (name) {
    var value = this._c[name];

    if (!value) {
      if (name === ".") {
        value = this.view;
      } else {
        var context = this;

        while (context) {
          if (name.indexOf(".") > 0) {
            var names = name.split("."), i = 0;

            value = context.view;

            while (value && i < names.length) {
              value = value[names[i++]];
            }
          } else {
            value = context.view[name];
          }

          if (value != null) {
            break;
          }

          context = context.parent;
        }
      }

      this._c[name] = value;
    }

    if (typeof value === "function") {
      value = value.call(this.view);
    }

    return value;
  };

  var  c = new _c(view);
  {{&body}}
}


